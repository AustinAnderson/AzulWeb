/*
0=blank
6=startig player marker
1=blue
2=yellow
3=red
4=black
5=white
*/


//tiles types to be represented by 1-5, {"id":0,"type":0} for blank, {"id":1,"type":6} for 1st token
//floor penalty values and board config to be

//only actions the player takes is to choose a color from either one of the factories or the centerOfTable and which patternLine to place in
//client request model
{
    "playerIndex":0,
    //action meaning take all the 2 tiles from the center of the table and put them in the second patternLine row
    "action":{
        "fromFactory":false,
        "tileType":2,
        "factoryIndex":0,//zero since default, or fromFactory =true and this will be the index
        "patternLineIndex":1
    },
    "gameState":{
        "changeCount":0,//for syncing clients, if one doesn't match end game
        "sharedData":{
            "config":{
                "floorPenalties": [-1,-1,-2,-2,-2,-3,-3],
                "wallLayoutToMatch":[
                    [1,2,3,4,5],
                    [5,1,2,3,4],
                    [4,5,1,2,3],
                    [3,4,5,1,2],
                    [2,3,4,5,1]
                ]
            },
            "discardPile":[{"id":11,"type":1},{"id":2,"type":1},{"id":3,"type":2},{"id":4,"type":2},{"id":5,"type":2},
                           {"id":6,"type":1},{"id":7,"type":3},{"id":8,"type":2},{"id":9,"type":4},{"id":10,"type":5}],//list of tiles in the box
            "centerOfTable": [{"id":1,"type":6},{"id":12,"type":2},{"id":13,"type":3}],
            "bag":[{"id":14,"type":1},{"id":15,"type":2},{"id":16,"type":3},{"id":17,"type":4},
                {"id":18,"type":5},{"id":19,"type":2},{"id":20,"type":3},{"id":21,"type":4},
                {"id":22,"type":5},{"id":23,"type":1},{"id":24,"type":2},{"id":25,"type":3},{"id":26,"type":4},{"id":27,"type":4},
                {"id":28,"type":5},{"id":29,"type":3},{"id":30,"type":4},{"id":31,"type":2},{"id":32,"type":3},
                {"id":33,"type":4},{"id":34,"type":2},{"id":35,"type":3},{"id":36,"type":1},...]//not shown but serialized in case of reshuffle from discard
            "factories": [
                [{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0}],
                [{"id":37,"type":1},{"id":38,"type":2},{"id":39,"type":3},{"id":40,"type":1}],
                [{"id":41,"type":1},{"id":42,"type":2},{"id":43,"type":2},{"id":44,"type":1}],
                [{"id":45,"type":1},{"id":46,"type":1},{"id":47,"type":1},{"id":48,"type":1}],
                [{"id":49,"type":1},{"id":50,"type":2},{"id":51,"type":2},{"id":52,"type":1}]
            ]
        },
        "playerData":[
            {//need to display other players' boards for strategy
                "score":0,
                "patternLines":[
                                                                                            [{"id":0,"type":0}],
                                                                          [{"id":0,"type":0},{"id":0,"type":0}],
                                                        [{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0}],
                                      [{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0}],
                    [{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0}]
                ],
                "wall":[
                    [1,1,1,0,0],
                    [0,0,0,1,0],
                    [0,1,0,1,0],
                    [0,0,0,0,0],
                    [0,0,1,0,0]
                ],
                "floorLine":[ {"id":0,"type":0}, {"id":0,"type":0}, {"id":0,"type":0}, {"id":0,"type":0}, {"id":0,"type":0}, {"id":0,"type":0}, {"id":0,"type":0}]
            },
            {
                "score":0,
                "patternLines":[
                                                                                            [{"id":0,"type":0}],
                                                                          [{"id":0,"type":0},{"id":0,"type":0}],
                                                        [{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0}],
                                      [{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0}],
                    [{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0},{"id":0,"type":0}]
                ],
                "wall":[
                    [1,1,1,0,0],
                    [0,1,0,0,0],
                    [0,1,1,1,0],
                    [0,0,0,0,0],
                    [0,0,1,0,0]
                ],
                "floorLine":[ {"id":0,"type":0}, {"id":0,"type":0}, {"id":0,"type":0}, {"id":0,"type":0}, {"id":0,"type":0}, {"id":0,"type":0}, {"id":0,"type":0}]
            }
        ]
    }
}
//server gets posted the above model,
//and validates according to game rules, 400 with displayable reason if fail, else
//crafts a response as a json of deltas to be broadcast via webhooks (signlR?) and responds 204 after broadcasting
{
    "changes":[
        {
            "tileId": 12,
            "destPath": "playerData[0].patternLines[1][1]"
        },
        { 
            "tileId": 1,
            "destPath": "playerData[0].floorLine[0]"
        }
    ]
}
//client has a queue of changes, and doesn't allow action until its empty, dequeues changelist, animates it, dequeues the next, ect
